#include "U8glib.h"
#include <DS3231.h>
#include <OneWire.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <EEPROMex.h>
#include "DHT.h"

U8GLIB_ST7920_128X64_1X u8g(11, 10, 9);
//RS - D9
//R/W - D10
//E - D11

#define DHTPIN 8
#define DHTTYPE DHT11

DS3231  rtc(A4, A5);
DHT dht(DHTPIN, DHTTYPE);

static const int RXPin = 4, TXPin = 3;
static const uint32_t GPSBaud = 9600;
TinyGPSPlus gps;
SoftwareSerial ss(RXPin, TXPin, false);

double DOM_LAT = 0.0, DOM_LON = 0.0;

static void smartDelay(unsigned long ms)
{
  unsigned long start = millis();
  do
  {
    while (ss.available())
      gps.encode(ss.read());
  } while (millis() - start < ms);
}

const uint8_t honda[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFC, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x03, 0xE0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x7F, 0xC0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFE, 0x00, 0x0F, 0xFF, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xC0, 0x01, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFC, 0x00, 0x3F, 0xFF, 0xFE, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x80, 0x03, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x7F, 0xFF, 0xFF, 0xF8, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xF0, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFE, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x07, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x7F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xFF, 0xFF, 0xC0, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7F, 0xFF, 0xF8, 0x01, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x1F, 0xFE, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xFF, 0xFF, 0x80, 0x3F, 0xFF, 0xFF, 0xF0, 0x00, 0x07, 0xFF, 0xFC, 0x00, 0x00, 0x00,
  0x00, 0x3F, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xFC, 0x00, 0x03, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00,
  0x03, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00,
  0x0F, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xC0, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00,
  0x3F, 0xFE, 0x01, 0xFF, 0xFF, 0xF0, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00,
  0x7F, 0xE0, 0x3F, 0xFF, 0xFC, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFE, 0x3F, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFC, 0x7F, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00,
  0xFC, 0x7F, 0xF8, 0x07, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00,
  0x7E, 0x3E, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00,
  0x3F, 0x80, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1F, 0xC7, 0xFF, 0xFF, 0xFC, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0xF1, 0xFF, 0xF8, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0xFC, 0x7C, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xFF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3F, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1F, 0xE3, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xF8, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0xFE, 0x60, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3F, 0xC7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1F, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xFF, 0xF1, 0xFF, 0xC1, 0xFF, 0xF8, 0x3F, 0xFC, 0x1F, 0xF3, 0xFF, 0xFF, 0x00, 0x03, 0xF8, 0x00,
  0xFF, 0xF1, 0xFF, 0xC7, 0xFF, 0xFE, 0x3F, 0xFE, 0x1F, 0xF3, 0xFF, 0xFF, 0xE0, 0x07, 0xFC, 0x00,
  0x1F, 0x80, 0x3E, 0x0F, 0xE0, 0x7F, 0x87, 0xBF, 0x03, 0x80, 0x7C, 0x03, 0xF0, 0x0F, 0x1E, 0x00,
  0x1F, 0x80, 0x3E, 0x1F, 0xC0, 0x3F, 0x87, 0x9F, 0xC3, 0x80, 0x7C, 0x01, 0xF8, 0x1E, 0x0F, 0x00,
  0x1F, 0xFF, 0xFE, 0x1F, 0x80, 0x1F, 0x87, 0x8F, 0xE3, 0x80, 0x7C, 0x00, 0xF8, 0x3F, 0x1F, 0x80,
  0x1F, 0xFF, 0xFE, 0x1F, 0x80, 0x1F, 0x87, 0x87, 0xF3, 0x80, 0x7C, 0x00, 0xF8, 0x3F, 0xFF, 0xC0,
  0x1F, 0x80, 0x3E, 0x1F, 0xC0, 0x3F, 0x87, 0x83, 0xFF, 0x80, 0x7C, 0x01, 0xF8, 0x78, 0x03, 0xE0,
  0x1F, 0x80, 0x3E, 0x0F, 0xF0, 0xFF, 0x07, 0x81, 0xFF, 0x80, 0x7C, 0x03, 0xF0, 0xF0, 0x01, 0xF0,
  0xFF, 0xF1, 0xFF, 0xC3, 0xFF, 0xFC, 0x3F, 0xE0, 0xFF, 0x83, 0xFF, 0xFF, 0xC3, 0xFE, 0x07, 0xFC,
  0xFF, 0xF1, 0xFF, 0xC0, 0xFF, 0xF0, 0x3F, 0xE0, 0x7F, 0x83, 0xFF, 0xFF, 0x83, 0xFE, 0x07, 0xFC
};

const uint8_t termometr[] PROGMEM = {
  0x07, 0x00, 0x0D, 0x80, 0x08, 0x80, 0x08, 0x80, 0x08, 0x9E, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80,
  0x08, 0x80, 0x08, 0x9E, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x08, 0x9E, 0x08, 0x80,
  0x08, 0x80, 0x08, 0x80, 0x08, 0x80, 0x08, 0x9E, 0x08, 0x80, 0x08, 0x80, 0x1A, 0xC0, 0x32, 0x60,
  0x27, 0x20, 0x6F, 0xB0, 0x6F, 0xB0, 0x67, 0x30, 0x32, 0x60, 0x18, 0xC0, 0x0F, 0x80, 0x07, 0x00
};


const uint8_t aku05[] PROGMEM = {
  0x07, 0xE0, 0x07, 0xE0, 0x3F, 0xFC, 0x60, 0x06, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03,
  0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03,
  0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03,
  0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0xC0, 0x03, 0x7F, 0xFE, 0x3F, 0xFC
};

const uint8_t krolik[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x16, 0x00, 0x3E, 0x13, 0x00, 0x00,
  0x19, 0x00, 0x00, 0x19, 0x80, 0x0F, 0x08, 0xC0, 0x00, 0x0C, 0x60, 0x00, 0x0C, 0x20, 0x1F, 0x86,
  0x30, 0x00, 0x02, 0x18, 0x00, 0x03, 0x0C, 0x01, 0xFF, 0x84, 0x07, 0x80, 0x36, 0x0E, 0x00, 0x23,
  0x18, 0x00, 0x01, 0x31, 0x80, 0x03, 0x31, 0xC0, 0x7E, 0x20, 0x61, 0xE0, 0x60, 0x23, 0x80, 0x40,
  0x36, 0x00, 0x40, 0x1C, 0x00, 0x40, 0x3F, 0x00, 0x40, 0x3F, 0x80, 0x40, 0x00, 0x80, 0x7F, 0xFF,
  0x80, 0x06, 0xC0, 0x00, 0x0D, 0x80, 0x00, 0x0B, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x0E, 0x00, 0x00
};

const uint8_t gora[] PROGMEM = {
  0x00, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x24, 0x00, 0x00, 0x24, 0x00, 0x00,
  0x66, 0x00, 0x00, 0x42, 0x00, 0x00, 0x42, 0x00, 0x00, 0xC3, 0x00, 0x00, 0x81, 0x00, 0x01, 0x81,
  0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x03, 0x00, 0xC0, 0x02, 0x00, 0x40, 0x02, 0x1C, 0x40,
  0x07, 0x1F, 0x60, 0x07, 0xBF, 0xE0, 0x0F, 0xFF, 0xF0, 0x0F, 0xFF, 0xF0, 0x0F, 0xFF, 0xF0, 0x1F,
  0xFF, 0xF8, 0x1F, 0xFF, 0xF8, 0x1F, 0xFF, 0xF8, 0x3F, 0xFF, 0xFC, 0x3F, 0xFF, 0xFC, 0x7F, 0xFF,
  0xFE, 0x7F, 0xFF, 0xFE, 0x7F, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};



float temperature;
float wilgotnosc;
char temperatureString[6] = "-";
char wilgstr[6] = "-";
char wyswysokosc[10] = "-";
char wyspredkosc[10] = "-";
char wysdom[10] = "-";
char wyssatelity[10] = " ";
char wysszerokosc[20] = " ";
char wysdlugosc[20] = " ";
char wysgodziny[5] = " ";
char wysminuty[5] = " ";
char wyssekundy[5] = " ";
char wysrok[5] = " ";
char wysmiesiac[5] = " ";
char wysdzien[5] = " ";


int godziny, minuty, sekundy;
int rok, miesiac, dzien;


float R1 = 4660; // Prawdziwa rezystancja R1 (4,7K)
float R2 = 1995; // Prawdziwa rezystancja R2 (2K)

float wartosc = 0;
float vout = 0.0;
float vin = 0.0;
int analogInput = 0; // POMIAR NAPIÄ�CIA NA A0
char napieciestr[6] = "-";
int wystemp = 0;
float wysnap = 0;
int wybor = 0;
float predkosc = 0;
float dodomu = 0.0;
int wysokosc = 0;
int counter = 0;
int counter2 = 0;
int countermenu = 0;
int satelity = 0;
double szerokosc;
double dlugosc;



int zapisane = 0;
int menu = 0;

const int buttonPin = 2;
int buttonState = 0;

void setup() {
  rtc.begin();
  dht.begin();
  pinMode(analogInput, INPUT);
  pinMode(buttonPin, INPUT_PULLUP);
  ss.begin(GPSBaud);
  DOM_LAT = EEPROM.readDouble(0);
  DOM_LON = EEPROM.readDouble(32);
  u8g.firstPage();
  do {
    u8g.drawBitmapP( 0, 0, 16, 64, honda);
  } while ( u8g.nextPage() );
  delay(3000);
  buttonState = digitalRead(buttonPin);
  if (buttonState == LOW)
  {
    wybor = 3;
  }
}

void loop() {

  counter++;
  counter2++;

  buttonState = digitalRead(buttonPin);

  switch (wybor)
  {
    case 0:
      if (counter > 10)
      {
        temperature = dht.readTemperature();
        wilgotnosc = dht.readHumidity();
        dtostrf(wilgotnosc, 3, 0, wilgstr);
        counter = 0;
      }
      if (temperature < -9.9)
      {
        dtostrf(temperature, 2, 0, temperatureString);
      }
      else
      {
        dtostrf(temperature, 2, 1, temperatureString);
      }
      wystemp = temperature / 2;

      wartosc = analogRead(analogInput);
      vout = (wartosc * 4.93) / 1024.0; //4.74 = WartoĹ›Ä‡ napiÄ™cia miÄ™dzy AREF a GND
      vin = vout / (R2 / (R1 + R2));
      dtostrf(vin, 2, 1, napieciestr);
      wysnap = (vin * 11) - (110 + (vin * 1.9));


      u8g.firstPage();
      do {
        u8g.drawLine(0, 13, 128, 13);
        u8g.drawLine(0, 51, 128, 51);
        u8g.setFont(u8g_font_5x8r);
        u8g.drawStr( 16, 48,  "CELSJUSZA");
        u8g.drawStr( 90, 48,  "WOLT");
        u8g.setFont(u8g_font_fub11);
        u8g.drawStr( 0, 11, rtc.getTimeStr());
        u8g.drawStr( 63, 11, rtc.getDateStr());
        u8g.drawStr( 0, 64,  "WILGOTN:");
        u8g.drawStr( 112, 64,  "%");
        u8g.drawStr( 84, 64,  wilgstr);
        u8g.setFont(u8g_font_fub17n);
        if (temperature > 38)
        {
          u8g.drawBitmapP( 0, 17, 2, 32, termometr);
          u8g.drawStr( 15, 38,  temperatureString);
          u8g.drawLine(6, 38, 6, 23);
        }
        else if (temperature < -5)
        {
          u8g.drawBitmapP( 0, 17, 2, 32, termometr);
          u8g.drawStr( 15, 38,  temperatureString);

        }
        else
        {
          u8g.drawBitmapP( 0, 17, 2, 32, termometr);
          u8g.drawStr( 15, 38,  temperatureString);
          u8g.drawLine(6, 38, 6, 38 - wystemp);
        }
        if (vin > 14.7)
        {
          u8g.drawBitmapP( 63, 17, 2, 32, aku05);
          u8g.drawStr( 81, 38, napieciestr);
          u8g.drawBox(68, 41, 6, 4);
          u8g.drawBox(68, 23, 6, 15);
        }
        else if (vin < 12)
        {
          u8g.drawBitmapP( 63, 17, 2, 32, aku05);
          u8g.drawStr( 81, 38, napieciestr);
        }
        else
        {
          u8g.drawBitmapP( 63, 17, 2, 32, aku05);
          u8g.drawStr( 81, 38, napieciestr);
          u8g.drawLine(67, 45, 67, 45 - wysnap);
          u8g.drawLine(68, 45, 68, 45 - wysnap);
          u8g.drawLine(69, 45, 69, 45 - wysnap);
          u8g.drawLine(70, 45, 70, 45 - wysnap);
          u8g.drawLine(71, 45, 71, 45 - wysnap);
          u8g.drawLine(72, 45, 72, 45 - wysnap);
          u8g.drawLine(73, 45, 73, 45 - wysnap);
          u8g.drawLine(74, 45, 74, 45 - wysnap);
        }
      } while ( u8g.nextPage() );
      if (buttonState == LOW && counter2 > 5)
      {
        wybor = 1;
        counter2 = 0;
        delay(600);
      }
      break;
    case 1:
      {

        if (gps.location.isValid() == 1)
        {

          dtostrf(gps.altitude.meters(), 7, 0, wyswysokosc);

          predkosc = gps.speed.kmph();
          if (predkosc < 3)
          {
            predkosc = 0.0;
          }
          dtostrf(predkosc, 6, 0, wyspredkosc);

          unsigned long distanceToDom =
            (unsigned long)TinyGPSPlus::distanceBetween(
              gps.location.lat(),
              gps.location.lng(),
              DOM_LAT,
              DOM_LON);
          dodomu = distanceToDom / 1000.0;
          dtostrf(dodomu, 4, 1, wysdom);
        }
        smartDelay(500);

        u8g.firstPage();
        do {
          u8g.drawLine(0, 13, 128, 13);
          u8g.drawLine(0, 51, 128, 51);
          u8g.drawBitmapP( -1, 17, 3, 32, krolik);
          u8g.drawBitmapP( 62, 17, 3, 32, gora);
          u8g.setFont(u8g_font_5x8r);
          u8g.drawStr( 28, 48,  "KM/H");
          u8g.drawStr( 89, 48,  "M N.P.M.");
          u8g.setFont(u8g_font_fub11);
          u8g.drawStr( 0, 11, rtc.getTimeStr());
          u8g.drawStr( 63, 11, rtc.getDateStr());
          u8g.drawStr( 0, 64, "DOM:");
          u8g.drawStr( 49, 64, wysdom);
          u8g.drawStr( 103, 64, "KM");
          u8g.setFont(u8g_font_fub14n);
          u8g.drawStr( 83, 38, wyswysokosc);
          u8g.setFont(u8g_font_fub17n);
          u8g.drawStr( 24, 39, wyspredkosc);

        } while ( u8g.nextPage() );
        if (buttonState == LOW && counter2 > 5)
        {
          wybor = 0;
          counter2 = 0;
        }

        break;
      case 2:
        if (gps.location.isValid() == 1)
        {
          dtostrf(gps.satellites.value(), 5, 0, wyssatelity);

          dtostrf( gps.location.lat(), 11, 6, wysszerokosc);

          dtostrf(gps.location.lng(), 12, 6, wysdlugosc);
        }
        smartDelay(500);


        u8g.firstPage();
        do {
          u8g.setFont(u8g_font_fub11);
          u8g.drawStr( 3, 11, "USTAW. DOMU");
          u8g.setFont(u8g_font_5x8r);
          u8g.drawStr( 12, 19, "Liczba satelit GPS:");
          u8g.drawStr( 90, 19, wyssatelity);
          u8g.drawStr( 6, 27, "Twoja aktualna pozycja:");
          u8g.drawStr( 0, 36, "SZ:");
          u8g.drawStr( 7, 36, wysszerokosc);
          u8g.drawStr( 66, 36, "DL:");
          u8g.drawStr( 68, 36, wysdlugosc);
          if (zapisane == 0)
          {
            u8g.drawStr( 4, 47, "ABY ZAPISAC NOWA POZYCJE");
            u8g.drawStr( 2, 55, "DOMU PRZYTRZYMAJ PRZYCISK");
            u8g.drawStr( 27, 63, "PRZEZ 3 SEKUNDY");
          }
          else
          {
            u8g.drawStr( 10, 53, "ZAPISONO NOWA POZYCJE!");
          }
        } while ( u8g.nextPage() );
        if (buttonState == LOW && counter2 > 5)
        {
          delay(1900);
          if (buttonState == LOW)
          {
            szerokosc = gps.location.lat();
            dlugosc = gps.location.lng();
            EEPROM.updateDouble(0, szerokosc);
            EEPROM.updateDouble(32, dlugosc);
            zapisane = 1;
          }
        }
        break;
      case 3:
        u8g.firstPage();
        do {
          u8g.setFont(u8g_font_fub11);
          u8g.drawStr( 12, 11, "USTAWIENIA");
          u8g.setFont(u8g_font_5x8r);
          u8g.drawStr( 24, 24, "1. Pozycja domu");
          u8g.drawStr( 20, 38, "2. Data i godzina");
          u8g.drawStr( 40, 63, "2019 V0.9");
          if (menu == 0)
          {
            u8g.drawStr( 102, 24, "<--");
          }
          else
          {
            u8g.drawStr( 110, 38, "<--");
          }
        } while ( u8g.nextPage() );
        if (buttonState == LOW && counter2 > 5)
        {
          counter2 = 0;
          if (menu == 0)
          {
            menu = 1;
            countermenu = 0;
          }
          else
          {
            menu = 0;
            countermenu = 0;
          }

        }
        countermenu++;
        if (countermenu > 50)
        {
          if (menu == 0)
          {
            wybor = 2;
          }
          else
          {
            wybor = 4;
          }
        }

        break;
      case 4:
        u8g.firstPage();
        do {
          u8g.setFont(u8g_font_5x8r);
          u8g.drawStr(1, 6, "USTAWIENIA DATY I GODZINY");
          u8g.drawStr( 12, 14, "Liczba satelit GPS:");
          u8g.drawStr( 90, 14, wyssatelity);
          u8g.drawStr( 20, 26, "Godzina:");
          u8g.drawStr( 62, 26, wysgodziny);
          u8g.drawStr( 72, 26, ":");
          u8g.drawStr( 77, 26, wysminuty);
          u8g.drawStr( 87, 26, ":");
          u8g.drawStr( 92, 26, wyssekundy);
          u8g.drawStr( 22, 34, "Data:");
          u8g.drawStr( 50, 34, wysdzien);
          u8g.drawStr( 60, 34, "/");
          u8g.drawStr( 65, 34, wysmiesiac);
          u8g.drawStr( 75, 34, "/");
          u8g.drawStr( 80, 34, wysrok);
          if (zapisane == 0)
          {
            u8g.drawStr( 24, 47, "ABY ZAPISAC DATE");
            u8g.drawStr( 12, 55, "I GODZINE PRZYTRZYMAJ");
            u8g.drawStr( 4, 63, "PRZYCISK PRZEZ 3 SEKUNDY");
          }
          else
          {
            u8g.drawStr( 5, 53, "ZAPISONO DATE I GODZINE!");
          }


        } while ( u8g.nextPage() );
        smartDelay(900);

        godziny = gps.time.hour() + 2;
        if (godziny > 23) {
          godziny = godziny - 24;
        }
        
        minuty = gps.time.minute();
        sekundy = gps.time.second();

        rok = gps.date.year();
        miesiac = gps.date.month();
        dzien = gps.date.day();

        dtostrf(gps.satellites.value(), 5, 0, wyssatelity);
        dtostrf(godziny, 2, 0, wysgodziny);
        dtostrf(minuty, 2, 0, wysminuty);
        dtostrf(sekundy, 2, 0, wyssekundy);
        dtostrf(rok, 4, 0, wysrok);
        dtostrf(miesiac, 2, 0, wysmiesiac);
        dtostrf(dzien, 2, 0, wysdzien);

        if (buttonState == LOW && counter2 > 5)
        {
          delay(1300);
          if (buttonState == LOW)
          {
            rtc.setTime(godziny, minuty, sekundy);
            rtc.setDate(dzien, miesiac, rok);
            zapisane = 1;
          }
        }

      }
      break;
  }


}

